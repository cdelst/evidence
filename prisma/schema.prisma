// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_DATABASE_URL")
}

model EvidenceType {
    id   String @id @default(cuid())
    name String

    Evidence Evidence[]

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Tag {
    id   String @id @default(cuid())
    name String

    Evidence Evidence[]

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt 
}

model Evidence {
    id          String  @id @default(cuid())
    title       String
    description String?

    type           EvidenceType @relation(fields: [evidenceTypeId], references: [id])
    evidenceTypeId String

    impact  Int     @default(1)
    context String?
    source  String?

    tags Tag[]

    date      DateTime @default(now())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    refresh_token_expires_in Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    evidence      Evidence[]
    tags          Tag[]
    evidenceTypes EvidenceType[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
